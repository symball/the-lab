- name: Set some facts when using internal Cert authority
  when: nginx_use_internal_certificate_authority
  set_fact:
    ca_host: "{{ hostvars[groups['certificate_authority'][0]]['inventory_hostname'] }}"
    ca_key_type: "{{ hostvars[groups['certificate_authority'][0]]['certificate_authority_cert_format'] }}"

- name: CA host / domain
  debug:
    msg: "CA host is {{ ca_host }} / {{ domain }}"

- name: Render initial Nginx configuration file for letsencrypt checking
  when: letsencrypt
  become: True
  template:
    src: "./templates/lets_encrypt_part_1.conf.j2"
    dest: "/etc/nginx/sites-enabled/{{ domain }}.conf"

- name: Restart nginx for acme challenge pickup
  become: true
  when: letsencrypt
  command: "sudo su {{ nginx_user }} nginx -s reload"

- name: Have Certificate Authority generate certificate
  when: nginx_use_internal_certificate_authority
  delegate_to: "{{ ca_host }}"
  import_tasks: certificate_authority_generate_server_cert.yml
  vars:
    cert_domain: "{{ domain }}"

- name: Domain name test
  debug:
    msg: "The domain name is {{ domain }}"

- name: Push the generated certificates to where Nginx expects
  become: true
  when: nginx_use_internal_certificate_authority
  ansible.builtin.copy:
    src: "/tmp/{{ certificate_item }}"
    dest: "/etc/nginx/sec/{{ certificate_item }}"
    owner: "{{ nginx_user }}"
    group: "{{ nginx_user_group }}"
    mode: 0500
  with_items:
    - "{{ domain }}.cert.{{ ca_key_type }}"
    - "{{ domain }}.key.{{ ca_key_type }}"
  loop_control:
    loop_var: certificate_item

- name: Generate security certificate
  when: not nginx_use_internal_certificate_authority
  import_tasks: nginx_generate_certificate.yml

- name: Remove the temporary configuration file
  become: True
  when: letsencrypt
  file:
      state: absent
      path: "/etc/nginx/sites-enabled/{{ domain }}.conf"

- name: Generate Nginx password rule
  when: auth_user is defined
  delegate_to: localhost
  command: "htpasswd -n -b {{ auth_user }} {{ auth_pass }}"
  register: nginx_password

- name: Put the password rule in place
  when: auth_user is defined
  become: True
  copy:
    owner: "{{ common_user }}"
    group: "{{ common_group }}"
    content: "{{ nginx_password.stdout }}"
    dest: "{{ common_working_path }}/nginx/.htpasswd_{{ domain }}"

- name: Check if alternate nginx template being used
  when: nginx_template_role is defined
  become: True
  template:
    src: "../../{{ nginx_template_role }}/templates/nginx.conf.j2"
    owner: "{{ common_user }}"
    group: "{{ common_group }}"
    dest: "{{ common_working_path }}/nginx/{{ domain }}.conf"

- name: Create the Nginx site configuration
  when: nginx_template_role is undefined
  become: True
  template:
    src: "./templates/nginx_reverse_proxy.conf.j2"
    owner: "{{ nginx_user }}"
    group: "{{ nginx_user_group }}"
    dest: "/etc/nginx/sites-enabled/{{ domain }}.conf"

- name: Restart nginx
  become: True
  command: "sudo -u {{ nginx_user }} nginx -s reload"

- name: Write service to host files on all nodes
  become: true
  delegate_to: "{{ hostvars[inventory_device].inventory_hostname }}"
  ansible.builtin.blockinfile:
    dest: /etc/hosts
    marker: "# {mark} ANSIBLE SERVICE HOST {{ domain }}"
    block: "{{ ansible_host }} {{ domain }}"
  with_items: "{{ groups.all }}"
  loop_control:
    loop_var: inventory_device
