---
- set_fact:
    db_host: "{{ hostvars[groups['postgresql'][0]].inventory_hostname_short }}"
    db_port: "{{ hostvars[groups['postgresql'][0]]['postgresql_port'] }}"
    domain: "{{ home_assistant_domain | default(home_assistant_reference + '.' + fqcdn) }}"

- name: super | Check if zigbee config file exists so we don't overwrite
  become: true
  ansible.builtin.stat:
    path: /var/lib/zigbee2mqtt/configuration.yaml
  register: zigbee2mqtt_config_present

- name: super | Install Home Assistant packages
  become: true
  community.general.pacman:
    name: "{{ home_assistant_arch_packages }}"

- name: super | Create the backend database user
  delegate_to: "{{ db_host }}"
  ansible.builtin.import_tasks: tasks/postgresql_setup_user_db.yml
  vars:
    host: "{{ db_host }}"
    user_name: "{{ home_assistant_db_user }}"
    user_pass: "{{ home_assistant_db_pass }}"
    schema: "{{ home_assistant_db_name }}"

- name: super | Enable Mosquitto MQTT broker
  become: true
  ansible.builtin.systemd:
    enabled: true
    state: started
    name: mosquitto

- name: super | Write Zigbee2MQTT configuration
  become: true
  when: not zigbee2mqtt_config_present.stat.exists
  ansible.builtin.template:
    src: zigbee2mqtt-configuration.yaml.j2
    dest: /var/lib/zigbee2mqtt/configuration.yaml
    owner: zigbee2mqtt
    group: zigbee2mqtt
    mode: "0640"

- name: super | Write Zigbee2MQTT secrets
  become: true
  when: not zigbee2mqtt_config_present.stat.exists
  ansible.builtin.template:
    src: zigbee2mqtt-secret.yaml.j2
    dest: /var/lib/zigbee2mqtt/secret.yaml
    owner: zigbee2mqtt
    group: zigbee2mqtt
    mode: "0640"

- name: super | Copy device definition for bulbs
  become: true
  ansible.builtin.copy:
    src: AD-GU10RGBW3001.js
    dest: /var/lib/zigbee2mqtt/AD-GU10RGBW3001.js
    owner: zigbee2mqtt
    group: zigbee2mqtt
    mode: "0640"

- name: super | Enable Zigbee2MQTT
  become: true
  ansible.builtin.systemd:
    enabled: true
    state: started
    name: zigbee2mqtt

- name: super | Create path to host the extended SystemD file
  become: true
  ansible.builtin.file:
    state: directory
    path: /etc/systemd/system/home-assistant.service.d
    mode: "0644"

- name: super | Copy across extension to the SystemD unit file
  become: true
  ansible.builtin.copy:
    src: systemd-dropin.conf
    dest: /etc/systemd/system/home-assistant.service.d/override.conf
    mode: "0644"

- name: super | Ensure home assistant user group present
  become: True
  group:
    name: hass
    state: present

- name: super | Add a system user and group for Home Assistant
  become: true
  ansible.builtin.user:
    name: hass
    group: hass
    shell: /usr/bin/nologin
    system: true

- name: super | Install support for PostgreSQL within Home Assistant venv
  become: True
  ansible.builtin.command:
    cmd: >
      sudo -u hass /var/lib/hass/.venv/bin/python
      -m pip install psycopg2 isal


- name: super | Enable Home Assistant with a daemon-reload to pickup changes
  become: true
  ansible.builtin.systemd:
    daemon_reload: true
    enabled: true
    state: started
    name: home-assistant

- name: super | Wait for the configuration to become available after first run
  become: true
  ansible.builtin.wait_for:
    path: /var/lib/hass/configuration.yaml

- name: super | Configuration block to use Postgresql instead of SQLite
  become: true
  ansible.builtin.blockinfile:
    path: /var/lib/hass/configuration.yaml
    marker: "# {mark} ANSIBLE POSTGRESQL_RECORDER"
    block: |
      recorder:
        db_url: !secret recorder_postgresql_url

- name: super | Postgresql access secret
  become: true
  ansible.builtin.blockinfile:
    path: /var/lib/hass/secrets.yaml
    block: 'recorder_postgresql_url: "{{ home_assistant_db_connection_string }}"'
    marker: "# {mark} ANSIBLE POSTGRESQL_CREDENTIALS"

- name: super | Restart Home Assistant to pickup config changes
  become: true
  ansible.builtin.systemd:
    state: restarted
    name: home-assistant

- name: Create a reverse proxy service
  import_tasks: tasks/nginx_reverse_proxy.yml
  vars:
    reference: "{{ home_assistant_reference }}"
    domain: "{{ domain }}"
    letsencrypt: "{{ nginx_facade_use_certbot }}"
    app_port: "{{ home_assistant_frontend_port }}"
    proxy_extra_root_rules: |
      map $http_upgrade $connection_upgrade {
          default upgrade;
          ''      close;
      }
