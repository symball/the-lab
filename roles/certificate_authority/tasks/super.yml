---
- set_fact:
    root_cert_subject: "/C={{ certificate_authority_country_name }}\
      /ST={{ certificate_authority_state_or_province }}\
      /L={{ certificate_authority_locality_name }}\
      /O={{ certificate_authority_organization_name }}\
      /OU={{ certificate_authority_organization_unit }}\
      /CN=Root CA"
    intermediate_cert_subject: "/C={{ certificate_authority_country_name }}\
      /ST={{ certificate_authority_state_or_province }}\
      /L={{ certificate_authority_locality_name }}\
      /O={{ certificate_authority_organization_name }}\
      /OU={{ certificate_authority_organization_unit }}\
      /CN=Signing CA"

- name: Create user group
  become: True
  group:
    name: "{{ certificate_authority_user_group }}"
    state: present

- name: Create user
  become: true
  ansible.builtin.user:
    home: "{{ certificate_authority_root_path }}"
    name: "{{ certificate_authority_user }}"
    groups: "{{ certificate_authority_user_group }}"

- name: Create path to store images
  become: true
  ansible.builtin.file:
    state: directory
    path: "{{ ca_path }}"
    owner: "{{ certificate_authority_user }}"
    group: "{{ certificate_authority_user_group }}"
    mode: 0700
  with_items:
    - "{{ certificate_authority_root_path }}/certs"
    - "{{ certificate_authority_root_path }}/crl"
    - "{{ certificate_authority_root_path }}/csr"
    - "{{ certificate_authority_root_path }}/newcerts"
    - "{{ certificate_authority_root_path }}/private"
    - "{{ certificate_authority_intermediate_path }}/certs"
    - "{{ certificate_authority_intermediate_path }}/crl"
    - "{{ certificate_authority_intermediate_path }}/csr"
    - "{{ certificate_authority_intermediate_path }}/newcerts"
    - "{{ certificate_authority_intermediate_path }}/private"
  loop_control:
    loop_var: ca_path

- name: Create empty files for operational use
  become: true
  ansible.builtin.file:
    state: touch
    path: "{{ ca_ops_file }}"
    owner: "{{ certificate_authority_user }}"
    group: "{{ certificate_authority_user_group }}"
    mode: 0700
  with_items:
    - "{{ certificate_authority_root_path }}/index.txt"
    - "{{ certificate_authority_root_path }}/serial"
    - "{{ certificate_authority_intermediate_path }}/index.txt"
    - "{{ certificate_authority_intermediate_path }}/serial"
  loop_control:
    loop_var: ca_ops_file

- name: Create Certification Revocation List with default
  become: true
  ansible.builtin.copy:
    owner: "{{ certificate_authority_user }}"
    group: "{{ certificate_authority_user_group }}"
    mode: 0700
    dest: "{{ certificate_authority_intermediate_path }}/crlnumber"
    content: 1000

- name: Write Root CA config
  become: True
  ansible.builtin.template:
    src: root-config.cnf.j2
    owner: "{{ certificate_authority_user }}"
    group: "{{ certificate_authority_user_group }}"
    dest: "{{ certificate_authority_root_path }}/openssl-root.cnf"

- name: Check if root key created
  become: true
  ansible.builtin.stat:
    path: "{{ certificate_authority_root_path }}/private/ca.key.{{ certificate_authority_cert_format }}"
  register: root_key

- name: Create Root key
  become: true
  when: not root_key.stat.exists
#  no_log: true
  ansible.builtin.shell: >
    sudo OPENSSLPW={{ certificate_authority_root_password }} -u {{ certificate_authority_user }} 
    openssl genpkey -aes256 -algorithm {{ certificate_authority_algorithm }}
    {% if certificate_authority_algorithm == "RSA" %}-pkeyopt rsa_keygen_bits:{{ certificate_authority_algorithm_rsa_bytes }}{% endif %}
    {% if certificate_authority_algorithm == "RSA" %}-pkeyopt rsa_keygen_pubexp:{{ certificate_authority_algorithm_rsa_exponent }}{% endif %}
    -outform {{ certificate_authority_cert_format }}
    -out {{ certificate_authority_root_path }}/private/ca.key.{{ certificate_authority_cert_format }}
    -pass env:OPENSSLPW

- name: Make Root key read only
  become: true
  ansible.builtin.file:
    state: file
    path: "{{ certificate_authority_root_path }}/private/ca.key.{{ certificate_authority_cert_format }}"
    mode: 0400

- name: Check if root cert created
  become: true
  ansible.builtin.stat:
    path: "{{ certificate_authority_root_path }}/certs/ca.cert.{{ certificate_authority_cert_format }}"
  register: root_cert

- name: Create the Root cert file
  become: true
  when: not root_cert.stat.exists
  ansible.builtin.shell: >-
    sudo OPENSSLPW={{ certificate_authority_root_password }} -u {{ certificate_authority_user }} 
    openssl req -config {{ certificate_authority_root_path }}/openssl-root.cnf
    -set_serial 0x$(openssl rand -hex {{ certificate_authority_serial_number_length }})
    -keyform {{ certificate_authority_cert_format }}
    -outform {{ certificate_authority_cert_format }}
    -key {{ certificate_authority_root_path }}/private/ca.key.{{ certificate_authority_cert_format }}
    -subj '{{ root_cert_subject }}'
    -new -x509 -days {{ certificate_authority_root_duration_days }} -extensions v3_ca
    -out {{ certificate_authority_root_path }}/certs/ca.cert.{{ certificate_authority_cert_format }}
    -passin env:OPENSSLPW

- name: Write Intermediate CA config
  become: True
  ansible.builtin.template:
    src: intermediate-config.cnf.j2
    owner: "{{ certificate_authority_user }}"
    group: "{{ certificate_authority_user_group }}"
    dest: "{{ certificate_authority_intermediate_path }}/openssl-intermediate.cnf"

- name: Check if intermediate key created
  become: true
  ansible.builtin.stat:
    path: "{{ certificate_authority_intermediate_path }}/private/intermediate.key.{{ certificate_authority_cert_format }}"
  register: intermediate_key

- name: Create intermediate key
  become: true
  when: not intermediate_key.stat.exists
  #  no_log: true
  ansible.builtin.shell: >-
    sudo OPENSSLPW={{ certificate_authority_intermediate_password }} -u {{ certificate_authority_user }} 
    openssl genpkey -aes256 -algorithm {{ certificate_authority_algorithm }}
    {% if certificate_authority_algorithm == "RSA" %}-pkeyopt rsa_keygen_bits:{{ certificate_authority_algorithm_rsa_bytes }}{% endif %}
    {% if certificate_authority_algorithm == "RSA" %}-pkeyopt rsa_keygen_pubexp:{{ certificate_authority_algorithm_rsa_exponent }}{% endif %}
    -outform {{ certificate_authority_cert_format }}
    -out {{ certificate_authority_intermediate_path }}/private/intermediate.key.{{ certificate_authority_cert_format }}
    -pass env:OPENSSLPW

- name: Make intermediate key read only
  become: true
  ansible.builtin.file:
    state: file
    path: "{{ certificate_authority_intermediate_path }}/private/intermediate.key.{{ certificate_authority_cert_format }}"
    mode: 0400

- name: Check if Certificate Signing Request cert created
  become: true
  ansible.builtin.stat:
    path: "{{ certificate_authority_intermediate_path }}/csr/intermediate.csr.{{ certificate_authority_cert_format }}"
  register: intermediate_csr

- name: Create the Certificate Signing Request
  become: true
  when: not intermediate_csr.stat.exists
  ansible.builtin.shell: >-
    sudo OPENSSLPW={{ certificate_authority_intermediate_password }} -u {{ certificate_authority_user }} 
    openssl req -config {{ certificate_authority_intermediate_path }}/openssl-intermediate.cnf
    -key {{ certificate_authority_intermediate_path }}/private/intermediate.key.{{ certificate_authority_cert_format }}
    -keyform {{ certificate_authority_cert_format }}
    -outform {{ certificate_authority_cert_format }}
    -subj '{{ intermediate_cert_subject }}'
    -new 
    -out {{ certificate_authority_intermediate_path }}/csr/intermediate.csr.{{ certificate_authority_cert_format }}
    -passin env:OPENSSLPW

- name: Generate some randomness for the Cert
  become: true
  ansible.builtin.shell: >-
    sudo -u {{ certificate_authority_user }} 
    openssl rand -hex {{ certificate_authority_serial_number_length }}
    > {{ certificate_authority_root_path }}/serial

- name: Check if intermediate cert created
  become: true
  ansible.builtin.stat:
    path: "{{ certificate_authority_intermediate_path }}/certs/intermediate.cert.{{ certificate_authority_cert_format }}"
  register: intermediate_cert

- name: Create the intermediate certificate
  become: true
  when: not intermediate_cert.stat.exists
  ansible.builtin.shell: >-
    sudo OPENSSLPW={{ certificate_authority_root_password }} -u {{ certificate_authority_user }} 
    openssl ca -batch -config {{ certificate_authority_root_path }}/openssl-root.cnf -days 3650
    -passin env:OPENSSLPW
    -extensions v3_intermediate_ca -notext
    -out {{ certificate_authority_intermediate_path }}/certs/intermediate.cert.{{ certificate_authority_cert_format }}
    -infiles {{ certificate_authority_intermediate_path }}/csr/intermediate.csr.{{ certificate_authority_cert_format }}

- name: Make intermediate cert read only
  become: true
  ansible.builtin.file:
    state: file
    path: "{{ certificate_authority_intermediate_path }}/certs/intermediate.cert.{{ certificate_authority_cert_format }}"
    mode: 0400

- name: Check if Chain cert created
  become: true
  ansible.builtin.stat:
    path: "{{ certificate_authority_intermediate_path }}/certs/ca-chain.cert.{{ certificate_authority_cert_format }}"
  register: chain_cert

- name: Create chain certificate
  become: true
  when: not chain_cert.stat.exists
  ansible.builtin.shell: >-
    cat {{ certificate_authority_intermediate_path }}/certs/intermediate.cert.{{ certificate_authority_cert_format }}
    {{ certificate_authority_root_path }}/certs/ca.cert.{{ certificate_authority_cert_format }}
    > {{ certificate_authority_intermediate_path }}/certs/ca-chain.cert.{{ certificate_authority_cert_format }}

- name: Make chain cert read only
  become: true
  ansible.builtin.file:
    state: file
    path: "{{ certificate_authority_intermediate_path }}/certs/ca-chain.cert.{{ certificate_authority_cert_format }}"
    owner: "{{ certificate_authority_user }}"
    group: "{{ certificate_authority_user_group }}"
    mode: 0400

- name: Download the Intermediate certificate for distribution
  become: true
  ansible.builtin.fetch:
    flat: true
    src: "{{ certificate_authority_intermediate_path }}/certs/intermediate.cert.{{ certificate_authority_cert_format }}"
    dest: "{{ ansible_working_path }}/intermediate.cert.{{ certificate_authority_cert_format }}"
