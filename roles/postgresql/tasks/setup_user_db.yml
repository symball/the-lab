- set_fact:
    schema_name: "{{ schema | default(db_user_name) }}"
    user_exists: False
    schema_exists: False

- name: "Check if user exists"
  become: True
  shell: >
    sudo -u postgres psql -c "SELECT 1 FROM pg_roles WHERE rolname='{{ db_user_name }}'" | cut -d \| -f 1 | grep -q 1; echo $?
  args:
    chdir: /tmp
    warn: no
  register: POSTGRES_USER_SETUP

- name: Set boolean flag for user setup state
  when: POSTGRES_USER_SETUP.stdout == "0"
  set_fact:
    user_exists: True

- name: Check if schema exists
  become: True
  shell: >
    sudo -u postgres psql -lqt | grep -q {{ schema_name }}; echo $?
  args:
    chdir: /tmp
    warn: no
  register: POSTGRES_SCHEMA_SETUP

- name: Set boolean flag for schema setup state
  when: POSTGRES_SCHEMA_SETUP.stdout == "0"
  set_fact:  
    schema_exists: True

- name: "Create username {{ db_user_name }}"
  no_log: true
  become: True
  command: sudo -u postgres psql -c "CREATE USER {{ db_user_name }} WITH ENCRYPTED PASSWORD '{{ db_user_pass }}'"
  when: user_exists == False

- name: Change password
  no_log:
  become: True
  when: user_exists == True
  command: sudo -u postgres psql -c "ALTER USER {{ db_user_name }} WITH ENCRYPTED PASSWORD '{{ db_user_pass }}'"

- name: Make record of having setup the user
  delegate_to: localhost
  copy:
    content: ""
    dest: "{{ ansible_control_flags_path }}/{{ env }}POSTGRES_USER_{{ db_user_name }}"

- name: "Create {{ schema_name }}"
  when: schema_exists == False
  become: True
  command: sudo -u postgres psql -c "CREATE DATABASE {{ schema_name }}"

- name: Grant privileges
  when: schema_exists == False
  become: True
  command: sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE {{ schema_name }} TO {{ db_user_name }}"

- name: Check whether the security rule for user exists
  become: True
  lineinfile:
    path: "/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf"
    regexp: "host    all             {{ db_user_name }}      0.0.0.0/0               {{ postgresql_password_encryption }}"
    state: absent
  check_mode: yes
  changed_when: false
  register: POSTGRES_SECURITY_RULE_CREATED

- name: Create the remote access rule for the username
  become: True
  when: not POSTGRES_SECURITY_RULE_CREATED.found
  shell: >
    echo "host    all             {{ db_user_name }}      0.0.0.0/0               {{ postgresql_password_encryption }}" >> /etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf

- name: Reload postgresql service
  become: True
  service:
    name: postgresql
    state: restarted
